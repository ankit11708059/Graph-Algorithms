#include<bits/stdc++.h>
using namespace std;

typedef pair<int,int> iPair;
class Disjoints
{
    public:
    int n;
    int *parent,*rnk;
    Disjoints(int n)
    {
        this->n=n;
        parent=new int[n+1];
        rnk=new int[n+1];
        for(int i=0;i<=n;i++)
        {
            rnk[i]=0;
            parent[i]=i;
        }
    }
    int find(int u)
    {
        if(u!=parent[u])
        {
            parent[u]=find(parent[u]);
        }
        return parent[u];
    }
    void merge(int u,int v)
    {
        u=find(u);
        v=find(v);

        if(rnk[u]>rnk[v])
        parent[v]=u;
        else
        parent[u]=v;
        if(rnk[u]==rnk[v])
        rnk[v]++;
    }
};
class Graph{

public :
    int V,E;
    Graph(int V,int E)
    {
        this->V=V;
        this->E=E;
    }
    vector<pair<int,iPair>> edges;
    void addEdge(int u,int v,int w)
    {
        edges.push_back({w,{u,v}});
    }
    int kruskals()
    {
        int mst_w=0;
        sort(edges.begin(),edges.end());
        Disjoints d(V);
        for(auto it=edges.begin();it!=edges.end();it++)
        {
            int u=it->second.first;
            int v=it->second.second;

            int set_x=d.find(u);
            int set_y=d.find(v);
            if(set_x!=set_y)
            {
                cout<<u<<" "<<v<<endl;
                mst_w+=it->first;
                d.merge(set_x,set_y);
            }
        }
        return mst_w;
    }

};
int main()
{
    int V = 9, E = 14;
    Graph g(V, E);

    g.addEdge(0, 1, 4);
    g.addEdge(0, 7, 8);
    g.addEdge(1, 2, 8);
    g.addEdge(1, 7, 11);
    g.addEdge(2, 3, 7);
    g.addEdge(2, 8, 2);
    g.addEdge(2, 5, 4);
    g.addEdge(3, 4, 9);
    g.addEdge(3, 5, 14);
    g.addEdge(4, 5, 10);
    g.addEdge(5, 6, 2);
    g.addEdge(6, 7, 1);
    g.addEdge(6, 8, 6);
    g.addEdge(7, 8, 7);

    cout << "Edges of MST are \n";
    int mst_wt = g.kruskals();

    cout << "\nWeight of MST is " << mst_wt;

}

